package pokesay

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _pokes_gengar_cow = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x95\xb9\x52\xf3\x30\x10\xc7\x7b\x3d\xc5\x4e\x26\xdd\xf7\x15\xbe\x72\x08\x87\x2a\xa4\x25\x05\x49\x95\xcc\x30\x03\x18\x42\x21\x52\xe0\x0c\x05\x93\x77\x67\x42\x6c\x1d\xd6\xae\xbc\x32\xa9\x8c\x58\xed\xf1\xdb\xbf\x76\x9f\xde\x3f\xd4\xf1\xa5\x82\x87\xcd\xdd\x7a\xbb\xf9\x0f\xa3\x9b\x53\xfd\x3a\x1f\x95\x62\x5c\x1f\xaa\xc7\xe7\xe3\x17\xdc\x2e\x16\xab\xf5\xb2\x14\x60\x7e\xe3\xfa\x70\x3c\xbd\x1d\xea\x4f\xfb\x90\x38\xa5\x8e\xad\xf3\x7d\xb5\x2b\xa4\x02\xef\xb7\xaf\x76\xf9\xbc\x9c\x94\x59\x3e\x55\xfb\xfb\xef\xed\xbf\x6c\x32\x2f\xce\x17\x6b\x7d\xda\x58\xc8\x99\x65\x00\x57\x7f\xc2\x36\xd4\xbe\xd2\xa4\xb0\x7d\x39\x5e\xa5\x22\x22\x1a\xd7\x00\xe8\x31\x27\x54\x20\x00\x44\x54\xe7\x9b\xca\x99\x0a\xa0\x92\xfa\xef\xe4\x2c\xbc\x44\x6d\x07\x85\x4e\x9a\xa4\xda\xcd\x6c\x10\x4d\x2c\x85\x8b\x23\x46\x04\xd7\xde\xbd\x80\x71\x31\x19\x48\xe5\x76\xb1\x9b\x84\x54\x02\x39\x6d\xe9\xf4\xe3\x41\x41\xc9\x60\xdf\xae\x35\xb4\x4a\x37\x57\x48\xf9\x78\x09\xf7\xc9\x15\x03\x3a\x4d\x22\x51\x41\x5c\xf5\xee\x13\x41\x14\xe6\x74\x37\xcf\x98\x4f\xc4\x7c\x09\x30\x82\x6e\x7d\x3a\x45\x01\xc4\x28\xe0\x37\x05\xb4\xa6\xf6\x66\x22\x09\x62\x9e\xa9\x5b\x0e\x63\x86\xa5\xb3\x5c\x39\xcd\x07\xab\x22\x94\x98\xd7\x3e\x0a\x98\x18\x20\x83\x26\x28\x02\x0c\x13\x68\x17\x81\x79\x2d\x80\x46\x61\x21\x2f\x34\x72\x52\x22\x2d\xb8\x70\x83\x88\xa1\x93\xb0\xf2\x8f\xa0\x80\xc7\x71\xf1\xc6\x0e\x64\xdb\xff\x80\xf7\xca\x71\xd3\xdc\x4d\x63\x9c\x0f\xf8\xc2\x80\x15\x92\x9d\x4a\x16\xdc\x22\x2e\x49\x72\x7a\x47\x14\xd3\xab\x72\x5c\x2f\x78\xd7\xb5\xb3\x34\xdc\x4c\x0f\x88\xbe\x06\xb6\x09\x74\xff\x83\xd3\xf4\xb8\x51\x32\x67\x72\x1d\x3e\x46\xfc\xa1\xd6\x0c\x07\x5c\xad\x17\x57\x6c\xe6\xbd\x3d\xe5\xbe\xa4\xde\x7d\x9a\x9c\x7b\xd6\x0d\xb1\xee\xbb\xf3\xf0\x2f\x35\x12\xdb\x9d\x6c\x5a\x38\x25\xf6\x6c\xb2\x77\x79\x42\x6c\x3e\x5e\x36\xb9\x54\x42\xac\xd6\x4b\xf1\x13\x00\x00\xff\xff\x77\xa7\x76\xfe\x6f\x0c\x00\x00")

func pokes_gengar_cow() ([]byte, error) {
	return bindata_read(
		_pokes_gengar_cow,
		"pokes/Gengar.cow",
	)
}

var _pokes_pikachu_cow = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x31\x6f\xf2\x30\x10\xdd\xfd\x2b\x4e\x88\xed\xfb\x06\xc7\x09\x10\x1a\x3a\x51\xd6\x32\x14\x26\x90\x2a\xb5\x4d\x4b\x87\x94\xa1\x41\x1d\xaa\xfe\xf7\x2a\x11\xc4\xe7\xf8\xce\xbe\x50\xa6\xe8\x38\xfb\xee\xbd\x77\x7e\xf6\xd3\xfb\x47\x75\x7c\x29\xe1\x61\x73\xb7\xde\x6e\xfe\xc3\xe8\xe6\x54\xbf\xe6\xa3\x42\x8d\xeb\x43\xf9\xf8\x7c\xfc\x82\xdb\xc5\x62\xb5\x5e\x16\x0a\xec\x6f\x5c\x1f\x8e\xa7\xb7\x43\xfd\x89\x83\x4c\x94\x0b\xa3\xf8\xbe\xdc\x65\xf3\x0a\x60\x5f\xee\xd2\xbc\x98\x14\x26\x9d\x56\xfb\xfb\xef\xed\x3f\x33\xc9\xb3\x1f\xfb\xd5\x2d\x6d\x16\x5c\x12\xd1\xaa\x39\x5e\xd5\xee\x49\xef\xa8\xdc\xb4\x2e\xe1\x9c\x9c\xcc\xf2\xca\xcf\x68\xa2\xb6\xb0\x49\x88\x14\x93\xce\x6c\x45\xa3\x85\xdd\x84\xbf\x28\xb8\x59\x07\xf7\xd2\x71\x66\xb8\x76\x84\x84\x74\x61\xbb\x44\x5b\xe8\xe4\xf6\x2d\x4d\x64\x03\xe0\xf2\x14\xa4\x95\x87\xe1\xe2\xb6\xbc\xb2\xcc\xb3\x50\xf1\x7f\x40\xc0\xd3\x09\x27\x0d\x26\x20\x02\xe3\x2c\x0d\x57\x57\x01\x55\xf9\x6a\x62\x25\x1d\x45\xe7\xc3\x60\xdc\xbd\xc3\x43\x0c\x31\xa9\x47\xd2\x67\x9e\x99\x7e\x5f\x3b\x04\x06\x01\xbe\x46\xdf\xa9\xcb\x33\xfc\xe5\x78\x07\xf8\xc2\x9c\x4b\x1b\xd2\xfe\x84\x74\xac\x85\x11\x9b\x04\x59\x5b\x9f\xce\xd0\xac\x62\x32\x53\x7a\x6b\x1d\x9b\x9d\xa6\x38\x5f\x9d\x30\xbb\x7e\x9d\xa0\x3c\x03\xcc\x06\xa8\x72\xbe\x3c\xac\xb7\x92\x0e\xc2\xcd\x26\xf6\x2d\x2d\xd0\xa7\xcb\xd0\x29\x77\x00\x23\x9d\x0c\x55\xde\x57\x5b\x34\x48\x3c\x39\xb4\x5d\xe9\x56\x27\xee\x3e\x26\x5d\x80\x2a\xdd\x46\xd9\xdb\xb9\x8d\x66\x3a\xa2\x4b\x22\xe2\x8b\x31\x2c\xab\x67\xa3\x50\xc4\xea\xb8\xa3\x22\xbb\xcc\xc4\xbe\x41\x53\x49\x91\xe3\x40\xa7\xfc\xc6\x55\x8b\x94\x4b\x0f\xa9\xc1\x8f\x23\x44\x86\x1a\x4b\x90\x85\x27\x16\xdf\x4b\x8c\xe4\xf8\xa5\xd5\x90\x47\x3f\x04\x08\x46\x14\x48\x89\x60\x37\xb1\x90\x63\xf3\xef\x89\x2d\x16\x0a\xa8\xb7\x40\xf8\x9c\x4a\xd0\x3b\x7b\xa6\xf3\x4a\xa9\xd5\x7a\xa9\x7e\x03\x00\x00\xff\xff\x5a\x36\x07\x54\xe1\x0b\x00\x00")

func pokes_pikachu_cow() ([]byte, error) {
	return bindata_read(
		_pokes_pikachu_cow,
		"pokes/Pikachu.cow",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			panic(err)
		}
		return a, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"pokes/Gengar.cow": pokes_gengar_cow,
	"pokes/Pikachu.cow": pokes_pikachu_cow,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pokes": &_bintree_t{nil, map[string]*_bintree_t{
		"Gengar.cow": &_bintree_t{pokes_gengar_cow, map[string]*_bintree_t{
		}},
		"Pikachu.cow": &_bintree_t{pokes_pikachu_cow, map[string]*_bintree_t{
		}},
	}},
}}
